"""
This script demonstrates how to start an acquisition from an external application, using a pre-existing imaging machine script file (.imsf), as generated by the IM software.
The script will first open the lid, wait for 3 seconds, close the lid and run the script.
This script could be adapted for robotic workflow for instance, where instead of wait, a robotic arm could install a new plate.

The experiment file (.imsf) contains all the information to run the experiment (well coordinates, channels, camera settings, image directory)
therefore no other command is usually needed in this scenario. 

See the API documentation for the list of commands available by TcpIp and their docstrings. 
https://acquifer.github.io/acquifer-core/acquifer/core/TcpIp.html
"""
from acquifer.core import TcpIp
from fiji.util.gui import GenericDialogPlus
from ij import IJ

class DialogIM(GenericDialogPlus):
	
	LABEL_OPEN_CLOSE = "Open/Close lid"
	
	def __init__(self):
		
		super(DialogIM, self).__init__("IM control")
		self.addFileField("Experiment file", "")
		self.addButton(self.LABEL_OPEN_CLOSE, self) # add a button with the dialog itself as ActionListerner, ie the click action is delegated to the Dialog actionPerformed method
		self.setOKLabel("Start")
		self.im = TcpIp() # open the communication port with the IM
	
	def actionPerformed(self, event):
		super(DialogIM, self).actionPerformed(event)
		
		label = event.getActionCommand()
		
		if label == self.LABEL_OPEN_CLOSE:
			
			if self.im.isLidOpened():
				IJ.showStatus("Closing lid")
				self.im.closeLid()
			
			else:
				IJ.showStatus("Opening lid")
				self.im.openLid()
		
		elif label == "Start":
			IJ.showStatus("Starting experiment")
			self.im.runScript(self.getNextString())
			self.im.closeConnection()
		
		else:
			pass

# Create an instance of the dialog and show it
dialog = DialogIM()
dialog.showDialog()