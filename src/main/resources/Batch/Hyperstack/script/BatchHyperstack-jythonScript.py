"""
This script can be saved to disk and used as a custom jython script (.py extension) with the plugin "Batch process hyperstack (script)"
The code below would be very similar for another scripting language.

In this example, we just display the name of the stack and Z-projection (which can be null if no projection was made) to the log window. 

Scripts should have 2 script-parameters for the image inputs (stack and proj as below).
These variables will be populated with the ImagePlus objects generated by the Batch process hyperstack plugin at each iteration, in a "headless" fashion.
Contrary than with macros, it is thus not necessary to display the images to process them with custom scripts.

NB: If no projection was done, proj is just null

NOTE : When open via the menu ACQUIFER > Examples, this script file opens as a temporary file.
Changes to this file will thus NOT be saved, in particular the next time you open this example via the menu, the original example will be shown.
Use File > Save As... to save a copy of this example, and keep your modifications.
You can also find all the examples on the following GitHub repository: https://github.com/acquifer/Fiji-examples
"""
#@ImagePlus stack
#@ImagePlus proj
from ij import IJ
from ij.plugin import Commands

IJ.log("Processing stack : " + stack.getTitle())
IJ.log("Processing projection : " + proj.getTitle())

# You custom processing command

# Close images (and free memory)

# either one by one
stack.close()
proj.close()

# Or using close all
Commands.closeAll()
